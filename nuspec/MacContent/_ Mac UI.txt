NOTE 
- You have to use Xamarin Studio for this...

1. Add a reference to your Core PCL project
2. Create a Setup.cs file
3. Modify AppDelegate.cs to create the new Setup and to call the IMvxAppStart
4. Add a views folder and a view/viewcontroller - cs - change the NSViewController inheritance to MvxViewController and add the MvxViewFor

	[MvxViewFor(typeof(FirstViewModel))]
	public partial class FirstViewController : MvxViewController

5. Edit the ViewDidLoad in the cs to add a bound control - e.g:

		public override void ViewDidLoad ()
		{
			View = new NSView(new RectangleF(0,100,320, 400));
			base.ViewDidLoad ();

			var textEditFirst = new NSTextField(new System.Drawing.RectangleF(10,0,320,40));
			View.AddSubview (textEditFirst);
			var textEditSecond = new NSTextField(new System.Drawing.RectangleF(10,50,320,40));
			View.AddSubview(textEditSecond);
			var labelFull = new NSTextField(new System.Drawing.RectangleF(10,100,320,40));
			View.AddSubview (labelFull);
			var bu = new NSButton (new RectangleF (0, 150, 320, 40));
			bu.Title = "Hello";
			View.AddSubview (bu);

			var set = this.CreateBindingSet<FirstViewController, FirstViewModel> ();
			set.Bind (textEditFirst).For(v => v.StringValue).To (vm => vm.FirstName);
			set.Bind (textEditSecond).For(v => v.StringValue).To (vm => vm.LastName);
			set.Bind (labelFull).For(v => v.StringValue).To (vm => vm.FullName);	
			set.Bind (bu).For("Activated").To ("GoCommand");
			set.Apply ();
		}
		
Some parts can be done in Xcode and bound as well.
		

Where this requires using's of:

    using YourNameSpace.Core.ViewModels;
    using Cirrious.MvvmCross.Binding.BindingContext;
    using Cirrious.MvvmCross.Mac.Views;
