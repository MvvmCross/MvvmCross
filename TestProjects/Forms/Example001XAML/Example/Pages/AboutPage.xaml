<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:forms="using:Xamarin.Forms"
             x:Class="Example.Pages.AboutPage"
             Title="About">
    
    <ContentPage.Resources>
        <ResourceDictionary>
           <Style TargetType="Label">
                <Setter Property="Font">
                    <OnPlatform x:TypeArguments="Font">
                        <OnPlatform.iOS>12</OnPlatform.iOS>
                        <OnPlatform.Android>12</OnPlatform.Android>
                        <OnPlatform.WinPhone>18</OnPlatform.WinPhone>
                    </OnPlatform>
                </Setter>               
           </Style>
        </ResourceDictionary>
    </ContentPage.Resources>
 
    
    <!-- Jul 22 2015 Xamarin have not yet provided Device.OnPlatform property for W81. The below syntax works by putting "5, 0, 5, 95" into the default-->
    <ContentPage.Padding Thickness="5, 0, 5, 95">
        <OnPlatform x:TypeArguments="Thickness"
                iOS="5, 20, 5, 0"
                Android="5, 0, 5, 0"
                WinPhone="5, 0, 5, 0"
         />
    </ContentPage.Padding>

    <StackLayout Spacing="10" Orientation="Vertical">
        <Label Text="XAML Sample: MvvM Basics">
            <Label.Text>
XAML Sample: MvvM Basics
                
Basic Model View ViewModel functionality:

            </Label.Text>
        </Label>
        <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="30" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            
            <Label Text="*" Grid.Row="0" Grid.Column="0"  HorizontalOptions="Center" />
            <Label Text="*" Grid.Row="1" Grid.Column="0"  HorizontalOptions="Center" />
            <Label Text="*" Grid.Row="2" Grid.Column="0"  HorizontalOptions="Center" />
            <Label Text="*" Grid.Row="3" Grid.Column="0"  HorizontalOptions="Center" />
            <Label Text="*" Grid.Row="4" Grid.Column="0"  HorizontalOptions="Center" />
            
            <Label Grid.Row="0" Grid.Column="1">
                <Label.Text>
Binding a View (page) to a ViewModel, two-way binding, View-updates-> ViewModel, ViewModel-update-> View
                </Label.Text>
            </Label>
            <Label Grid.Row="1" Grid.Column="1">
                <Label.Text>
MvvMCross Framework locates Pages for ViewModels via naming convention, loads and binds them
                </Label.Text>
            </Label>
            <Label Grid.Row="2" Grid.Column="1">
                <Label.Text>
Navigation to Page via MvvMCross IoC container, all you need is the ViewModel Type
                </Label.Text>
            </Label>
            <Label Grid.Row="3" Grid.Column="1">
                <Label.Text>
Buttons etc. use the ICommand pattern; this interface has a 'CanExecute' property the can enable / disable the button 
via standard property binding to visual element properties; and an Execute function called when the button is clicked
                </Label.Text>
            </Label>
            <Label Grid.Row="4" Grid.Column="1">
                <Label.Text>
MvvMCross.Forms same App simulteanously targeting multiple supported platforms.                
                </Label.Text>
            </Label>
        </Grid>
    </StackLayout>
	
</ContentPage>