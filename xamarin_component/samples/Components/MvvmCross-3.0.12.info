{"Name":"MvvmCross","Id":999,"Alias":"MvvmCross","Description":"First of all, give a short description of what your component does and\nwhy someone would want to put it in their apps.\n\nThen include a succinct code snippet or two showing the minimum viable\nintegration of your component into the user's app.\n\n```csharp\nusing MyComponentNamespace;\n...\n\npublic override void ViewDidLoad ()\n{\n\t// Show the user how to setup your component\n}\n```\n","Summary":"Add a huge amount of awesomeness to your Xamarin apps.","Version":"3.0.12","QuickStart":"TODO Core\nThe steps to get this Core project working are:\n\n1. Create a ViewModels folder and add a ViewModel:\n\n    public class FirstViewModel : Cirrious.MvvmCross.ViewModels.MvxViewModel\n    {\n         public string Hello { get { return \"Hello MvvmCross\"; } }\n    }\n\n2. Add an App.cs class - in it place the code to start the app with the FirstViewModel:\n\n    public class App : Cirrious.MvvmCross.ViewModels.MvxApplication\n    {\n        public override void Initialize()\n        {\n            CreatableTypes()\n                .EndingWith(\"Service\")\n                .AsInterfaces()\n                .RegisterAsLazySingleton();\n\t\n            RegisterAppStart<ViewModels.FirstViewModel>();\n        }\n    }\n\nTODO Droid\nThe steps to get this Android UI working are:\n\n1. Add a reference to your Core PCL project\n2. Create a Setup.cs file\n3. Add the MvxBindingAttributes file - make sure it's type is set to 'AndroidResource'\n4. Add a splashscreen - both cs file and the axml to the Resources folder \n  - also remove any other `MainLauncher` activities - eg Activity1\n5. Add a views folder and a FirstView view - also add FirstView.axml to the resources folder\n\n\nTODO Touch UI\nNOTE \n- Touch won't currently build from the PC as Xamarin.iOS is currently in the lab under development.\n- To make it build on the Mac you will need to substitute the 'real PCLs' with versions built using Xamarin.iOS on the Mac\n\nThe steps to get this Touch UI working are:\n\n1. Add a reference to your Core PCL project\n2. Create a Setup.cs file\n3. Modify AppDelegate.cs to create the new Setup and to call the IMvxAppStart\n4. Add a views folder and a view - cs - change the UIViewController inheritance to MvxViewController\n5. Edit the ViewDidLoad in the cs to add a bound control - e.g:\n\n        public override void ViewDidLoad()\n        {\n            View = new UniversalView();\n\n            base.ViewDidLoad();\n            var uiLabel = new UILabel(new RectangleF(0, 0, 320, 100));\n            View.AddSubview(uiLabel);\n\n            this.CreateBinding(uiLabel).To<FirstViewModel>(vm => vm.Hello).Apply();\n\n            // Perform any additional setup after loading the view\n        }\n\nWhere this requires using's of:\n\n    using YourNameSpace.Core.ViewModels;\n    using Cirrious.MvvmCross.Binding.BindingContext;\n    using Cirrious.MvvmCross.Touch.Views;\n","Hash":"d33fdee030a2bf607e394f2fb34cb901","TargetPlatforms":["ios","android"],"TrialHash":null}